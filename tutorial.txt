1: npx create-react-app my-project

2: instal bootstrap: npm install react-bootstrap bootstrap

3: apagar todos os arquivos desnecessários 

4: importar o bootstrap de forma geral na aplicação no app.js:  import 'bootstrap/dist/css/bootstrap.css'

5: Configurar Navbar de com o bootstrap, tailwind ou css puro

6: separar componetizção




ROUTES

7: importar o BrowserRouter, Routes, Route do react-dom pra traçar as rotas, depois linkar os componente no Header.js de acordo com o componente

OBS: pra SPA (single page application) usar o Link do react-dom e nos elementos substituir 'href="/"' por 'tag={Link} to="/" '



//CONEXÃO DO BACK COM O FRONT

8: baixar o servidor  e instalar o servidor do github como dependencia : npm install https://github.com/devpleno/minhas-series-server
rodar o servidor em: node node_modules/minhas-series-server/index.js

9: criar em package.json um  : "proxy ": "http://localhost:3002"   para quando houver uma requisição via ajax(axios) ele manda pra um servidor da API rest nesse sena´rio é o localhost:3002 em quanto a app ta rodando no "http://localhost:3000" RODA AMBOS NA MESMA PORTA NA PRODUÇÃO




AXIOS

10:Instalar o axios pra capturar os dados : npm install axios

11: No componete Home.js criamos um useState data, setData, importamos o axios e usamos ele em uma função async detData com o state e o axios.get pegando os dados da API do backend em conjuntos com state, em seguida chamamos a função dentro do useEffect retornando o getData

12: No componente Generos.js tambem importar axios e os hooks passar a rota axios.get(/api/genres) pra retonrar os dados da api renderizados na rota genres

13: criar Navbar importando do react-bootastrap

14: OBS: usar o AXIOS pra capturar os dado dentro do useEffect , usar tambem o useRef pra controlar o fluxo de loop do useEffect

15: passar as rows da tabela de forma dinamica usao uma função renderLine em seguida usar o map

16: usar uma condicional pra mostrar um alert caso não haja genenro na sessão




CRUD GENRES, CATCH DATA FROM FORM

17: Adiconar gênero criar novo componente NewGenre.js e importar a rota em App.js 

18: Em NewGenres.js configurar o form com a <div className='form-group'>, passar um useState name, setName. passar no <input> value={name}, passar no <input > evento onChange={onChange} com uma função que setar um novo valor , a função onChange será responsavel por em capturar o valor declarado no input

CREATE
19: importar o axios, pra pegar os dados e mandar pra o servidor, criar função save com o axios.post direcionado pra /api/genres, mostrando o then(res) direcionado pro console OBS: qunado o elemento a ser capturado tiver o meso nome do state não precisa passar "name:name" apenas "name"!

20: passar o evento onClick={save} no button  pra capturar os dadso com a função save

21: Criar state success, setSuccess começando em false pra declarar quando os dados foram enviados pra o banco de dados, passar o setSuccess como true no then() da função save(), em seguida importar o Navigate e passar uma condicinal if(success){<Navigate>} pra redirecionar pra página /generos qunado os dados forem enviados

DELETE
22: Em Genero.js na função renderLine() na tag <button> inserir evento onClick com a função chamndo a função  deleteGenre(record.id)

23: Na função deleteGenre() passar o axios.delete('/api/genres',+ id) passando o ID depois da chamda pra ficar dinamico

24: add um filter() na função deleteGenres pra alterar o estado assim que o objeto for deletado!


UPDATE
25: editar Gênero criar componente UpdateGenre.js


26:Ainda no componente Genero.js importar o Link do react-dom, inserir na função renderLine que renderiza as linhas da tabela   e passar o caminho com o: <Link to={'/generos/' + record.id} className='btn btn-warning'>Editar</Link> com a classe btn pra virar botão

27: no componente App.js passar a nova rota UpdateGenre com a rota dinamica "/:id" : 
<Route  exact path="/generos/:id" element={<UpdateGenre/>}/> 

28: No componete UpdateGenre.js imnportar useParams em react-router-dom que é responsável por retornar os valores das keys passadas dinamicamente na URL, estanciar o useParams() em params, em seguida estanciar em id o params.id .

29: Dentro de usEffect no axios passar a variável "id" na requisição e na dependencia do useEffect

30: Em seguida na função save  spassar o metodo put no axios e tambem passar o "id" apos a requisição 


OBS...
BUTTON NAVIGATE PAGES
OBS:importar o useNavigate de react-dom  criar a função routeChange passando o navigate linkado ao caminho da pagina no qual será redirecionada ao clicar no botão no caso


START series

31:Em Header.js add novo seletor na Navbar com o caminho pra o compponete Series

32: Em App.js criar o routeador traçando a rota /series pra o componente <Series/>

33: criar o componente Series.js baseado no Genero.js mudando o nome do componente, a rota de requiseção do axios pra: api/series  e mudar tambem o conxtexto das demais funções pra /series

34: Criar novo componente NewSerie.js com a mesma estrutura de NewGenres.js

35: criar componete InfoSerie.js, usando useEffect com o axios pra fazer a requisição,  usamos tambem o useParams pra poder buscar o id passado dinamicamente na URL  

36: Passamos o Route em App.js com o ":id" dinamico, e em Series.js alteramos a rota do Link na Função renderLine

37: no JSX do componete InfoSerie criar uuma sequencia de <div> passando row e col na proporção de 1/12 avos no 12 é o interioa da tela da esquerda pra direita e dentro de cada <div> passar <img src={data.post}>

38: criar uma variável masterHeader e passar na tag <header style={masterHeader}> nessa variavel carrega o dimensionameto do cabeçaçalho junto com o tamplate que vem da API


RENDER KEY
39:Criar um state mode, setMode , e com ele criar uma condicional tipo chave boleana pra renderiza o que está dentro DIV ou mão {node === "EDIT" && <div></div>}, e acima crair uma <div> com um <button onClick={'EDIT'}> com um evento EDIT que é diferente do estado original do state "INFO" por sua vez gerando uma diferenã de TRUE e fALSE

40: Aplicar tambem um dentro da <div> que estã com a renderização condicionada um <button onClick={()=> setMode('INFO)}> pra cnacelar a edição


41: OBS: mudar o state name pra form passar pelo useEffect usando spread operator pra pegar o valores anterioers e renderizar no campo input, passar o fomr.name em value={} no input



COMMENTS
 42:Criar função onChange2 e e passar como evento do <input>coments, no input pegar o value={form.comments} pois o commnets é o valor que está la na API 

 
 FUNCTION INTO FUNCTION
 OBS: passsar "field =>" na função onchange, quanto há uma função dentro da função chamar no evento: onClick={onChange()}  ao inves de onClick={onChange}
 dessa forma deixando a função onChange dinmamica, na função passar:     ...form, [field]: evt.target.value 
 dessa forma com a função dentro de [], basta passar a key que vem da API dentro do evento onClick no momento da chamda: onClick={onChange('key')}


GENRES SERIES

43: criar um state genres, setGenres, passar um novo useEffect o axios.get('api/gernes') retornarndo o setGenres(res.data.data) sem dependencias

44: passar um <select> do bootstrap  atraves .map() com os genres.id para ser renderizados como opção

45: Na função SAVE passar o + ID e o FORM n segundo parâmetro seguido do  metodo PUT 

ADD RADIO 

46: copiar modelo do bootstrap de radio button, depois passar um evento onClick com uma função 'seleciona('VALUE')', passar na função dentro do evento onClick o value do <input>

47: Criar a função seleciona passando outra função dentro pra deixar o value dinâmico igualmente a função onChange chamando o setForm com o spread operator de ...form em seguida passando staus: value 


SAVE STATUS 
48: criar novo state genreId, setGenreId
 passar no segundo useEffect a dependencia [data] estanciar data em genres depois usar .find() pra assossiaros dados do genre ao value do input do check radio e estanciar em encotrado, passar no setGenresId(encontrado.id) na condicional if(encontrado)

 49:pra SALVAR aplicar: axios.put('/api/series/'+ id ,{...form, genre_name: genreId})


50: mudar o BADGE criando um {data.staus === 'STAUS' && <Badage>} mostrar badage de acordo com status